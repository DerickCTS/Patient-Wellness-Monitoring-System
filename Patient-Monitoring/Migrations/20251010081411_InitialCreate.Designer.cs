// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Patient_Monitoring.Data;

#nullable disable

namespace Patient_Monitoring.Migrations
{
    [DbContext(typeof(PatientMonitoringDbContext))]
    [Migration("20251010081411_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Patient_Monitoring.Models.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.AppointmentSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SlotId");

                    b.ToTable("AppointmentSlots");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.AssignmentPlanDetail", b =>
                {
                    b.Property<string>("CustomDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("DetailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPlanAssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomDetailId");

                    b.HasIndex("PatientPlanAssignmentId");

                    b.ToTable("AssignmentPlanDetails");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.DailyTaskLog", b =>
                {
                    b.Property<string>("LogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientPlanAssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("PatientPlanAssignmentId");

                    b.ToTable("DailyTaskLogs");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Diagnosis", b =>
                {
                    b.Property<string>("DiagnosisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Disease", b =>
                {
                    b.Property<string>("DiseaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DoctorSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.DoctorAvailability", b =>
                {
                    b.Property<int>("AvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityID"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("AvailabilityID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorAvailabilities");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.DoctorTimeOff", b =>
                {
                    b.Property<int>("TimeOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeOffID"));

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TimeOffID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorTimeOffs");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.MedicationSchedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrescriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("TimeOfDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ScheduleId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("MedicationSchedules");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("NotificationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Patient", b =>
                {
                    b.Property<string>("PatientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.PatientDoctorMapper", b =>
                {
                    b.Property<string>("PatientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientID");

                    b.HasIndex("DoctorID")
                        .IsUnique();

                    b.ToTable("PatientDoctorMapper");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.PatientPlanAssignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedByDoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedWellnessPlanPlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyCount")
                        .HasColumnType("int");

                    b.Property<string>("FrequencyUnit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByDoctorId");

                    b.HasIndex("AssignedWellnessPlanPlanId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientPlanAssignments");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Prescription", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrescribingDoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex(new[] { "Token" }, "IX_Token_Unique")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.WellnessPlan", b =>
                {
                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByDoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PlanId");

                    b.HasIndex("CreatedByDoctorId");

                    b.ToTable("WellnessPlans");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.WellnessPlanDetail", b =>
                {
                    b.Property<string>("DetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("DetailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WellnessPlanPlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DetailId");

                    b.HasIndex("WellnessPlanPlanId");

                    b.ToTable("WellnessPlanDetails");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Appointment", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.AppointmentSlot", "AppointmentSlot")
                        .WithOne("Appointment")
                        .HasForeignKey("Patient_Monitoring.Models.Appointment", "SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentSlot");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.AssignmentPlanDetail", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.PatientPlanAssignment", "PatientPlan")
                        .WithMany("AssignmentPlanDetails")
                        .HasForeignKey("PatientPlanAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientPlan");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.DailyTaskLog", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.PatientPlanAssignment", "PatientPlan")
                        .WithMany("DailyTaskLogs")
                        .HasForeignKey("PatientPlanAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientPlan");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Diagnosis", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Appointment", "Appointment")
                        .WithMany("Diagnoses")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.Disease", "Disease")
                        .WithMany("Diagnosis")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.DoctorAvailability", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "Doctor")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.DoctorTimeOff", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "Doctor")
                        .WithMany("DoctorTimeOffs")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.MedicationSchedule", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Prescription", "Prescription")
                        .WithMany("MedicationSchedules")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Notification", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Patient", "Patient")
                        .WithMany("Notifications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.PatientDoctorMapper", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "Doctor")
                        .WithOne("AssignedPatient")
                        .HasForeignKey("Patient_Monitoring.Models.PatientDoctorMapper", "DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.Patient", "Patient")
                        .WithOne("PersonalizedDoctorMapper")
                        .HasForeignKey("Patient_Monitoring.Models.PatientDoctorMapper", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.PatientPlanAssignment", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "AssigningDoctor")
                        .WithMany("PatientPlanAssignments")
                        .HasForeignKey("AssignedByDoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.WellnessPlan", "AssignedWellnessPlan")
                        .WithMany("AssignedPatients")
                        .HasForeignKey("AssignedWellnessPlanPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.Patient", "AssignedPatient")
                        .WithMany("AssignedPlans")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedPatient");

                    b.Navigation("AssignedWellnessPlan");

                    b.Navigation("AssigningDoctor");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Prescription", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "Doctor")
                        .WithMany("PrescribedMedications")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient_Monitoring.Models.Patient", "Patient")
                        .WithMany("Medications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.WellnessPlan", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.Doctor", "CreatedByDoctor")
                        .WithMany("FormulatedWellnessPlans")
                        .HasForeignKey("CreatedByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByDoctor");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.WellnessPlanDetail", b =>
                {
                    b.HasOne("Patient_Monitoring.Models.WellnessPlan", "WellnessPlan")
                        .WithMany("WellnessPlanDetails")
                        .HasForeignKey("WellnessPlanPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellnessPlan");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Appointment", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.AppointmentSlot", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Disease", b =>
                {
                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AssignedPatient")
                        .IsRequired();

                    b.Navigation("DoctorAvailabilities");

                    b.Navigation("DoctorTimeOffs");

                    b.Navigation("FormulatedWellnessPlans");

                    b.Navigation("PatientPlanAssignments");

                    b.Navigation("PrescribedMedications");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AssignedPlans");

                    b.Navigation("Diagnoses");

                    b.Navigation("Medications");

                    b.Navigation("Notifications");

                    b.Navigation("PersonalizedDoctorMapper")
                        .IsRequired();
                });

            modelBuilder.Entity("Patient_Monitoring.Models.PatientPlanAssignment", b =>
                {
                    b.Navigation("AssignmentPlanDetails");

                    b.Navigation("DailyTaskLogs");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.Prescription", b =>
                {
                    b.Navigation("MedicationSchedules");
                });

            modelBuilder.Entity("Patient_Monitoring.Models.WellnessPlan", b =>
                {
                    b.Navigation("AssignedPatients");

                    b.Navigation("WellnessPlanDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
